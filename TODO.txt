Имеющиеся баги и варианты будущих улучшений:

Отсутствует реализация под Windows.
	Так как boost это кроссплатформенная библиотека,то часть написанная посредством этой библиотеки для компиляции под Windows в доработке 	
	не нуждается. Для компиляции под Windows требуется только доработь функциональность, которая касается работы с процессами, так как она 	
	реализовано на основе POSIX. Реализация работы с процессами в Windows потребует использования WinApi.
Отсутствует поддержка telnet-клиента.
	Реализация точно такая же как для netcat, только у telnet-клиента на конце сообщения другой символ.
Частичная реализация логирования работы программы.
	В моей реализации отсутствует обработка сигналов, которые посылает дочерний процесс родительскому в случае аварийного или неаварийного 	
	завершения, что не позволяет мне в полной мере логировать состояние дочерних процессов. Реализовать логирование в полной мере можно
	используя соответствующую функциональность из WinApi и POSIX, которая позволяет устанавливать обработчики сигналов.
Бага в завершение работы по таймауту.
	В моей реализации для каждого TCP соединения создается по одному таймеру. В случае, если после первой команды придет вторая команда,
	то таймер досрочно завершится и убьет дочерний процесс раньше времени, после чего запустит отсчет занова, но уже для нового дочернего 	
	процесса. Я вижу решение данной проблем в том, чтобы создавать для каждого дочернего процесса свой таймер.
Недостаточная производительность для эффективной обработки больше 10k соединений.
	В моей реализации используется только один объект boost::asio::io_service, который представляет собой сердце библиотеки boost.asio.
	Если таких объектов будет несколько, то это может увеличить производительность программы при большом количестве соединений.
Зависемость в CMakeList.txt от всего boost.
	При создание программы использовались библиотеки boost.asio и boost.log. Данные библиотеки можно использовать отдельно 
	от всего остального boost, а значит есть возможность уменьшить количество зависемостей.
Недостаточно рефакторинга.
	Возможно читабельность кода можно  улучшить, если выдель сущность Runner и Registrar. Где класс Runner представлял бы из себя
	обертку над низкоуровневым api для работы с процессами, а класс Registrar отвечал за хранение и ведение статистики для последующией
	записи в файл с помощью класс Log. Добавить в некоторые класс идиому Pimpl.
Недостаточно тщательная обработка ошибок при работе с демоном.
	Существует возможность лучше обработать различные аварийные ситуации, а так же было бы неплохо иметь функцию автоматического
	перезапуска демона в случае его падения. Для автоматического перезапуска демона потребовался бы родительский процесс, который бы следил 
	за состоянием демона.
Череcчур сложный лог.
	Можно было использовать BOOST_LOG_TRIVIAL.
При определенных условиях повторный запуск программы приводит к её падению.
	Причиной падения являются не закрытые дочерние процессы, которые были созданы при работе программмы. Я подозреваю, что дело в том, что
	после завершения родительского процесса дочерние процессы тоже требуют завершения. Единственный путь решения данной проблемы, я вижу
	 в принудительном завершение всех дочерних процессов перед завершением программы.
Бага связнная с разрешенными командами для запуска.
	Дело в том, что если запустить с помощью ранера gnome-terminal, а из него в свою очередь посласть команду посредством netcat, то по 
	какой-то причине, даже если команда не входит в список разрешенных команд, то ранер все равно её запустить. Скорее всего это как-то 
    связано с тем, что команда посылается из дочернего процесса.
	
